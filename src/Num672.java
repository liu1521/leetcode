import com.sun.tools.javac.util.Assert;

/**
 * @Author: liu
 * @Date: 2022/9/15
 * @Description: 672. 灯泡开关 Ⅱ
 *
 * 房间中有 n 只已经打开的灯泡，编号从 1 到 n 。墙上挂着 4 个开关 。
 *
 * 这 4 个开关各自都具有不同的功能，其中：
 *
 * 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开）
 * 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, ...）
 * 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, ...）
 * 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, ...（即 1, 4, 7, 10, ...）
 * 你必须 恰好 按压开关 presses 次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。
 *
 * 给你两个整数 n 和 presses ，执行完所有按压之后，返回 不同可能状态 的数量。
 *
 * 示例 1：
 * 输入：n = 1, presses = 1
 * 输出：2
 * 解释：状态可以是：
 * - 按压开关 1 ，[关]
 * - 按压开关 2 ，[开]
 *
 * 示例 2：
 * 输入：n = 2, presses = 1
 * 输出：3
 * 解释：状态可以是：
 * - 按压开关 1 ，[关, 关]
 * - 按压开关 2 ，[开, 关]
 * - 按压开关 3 ，[关, 开]
 *
 * 示例 3：
 * 输入：n = 3, presses = 1
 * 输出：4
 * 解释：状态可以是：
 * - 按压开关 1 ，[关, 关, 关]
 * - 按压开关 2 ，[关, 开, 关]
 * - 按压开关 3 ，[开, 开, 开]
 * - 按压开关 4 ，[关, 开, 开]
 *
 * 提示：
 * 1 <= n <= 1000
 * 0 <= presses <= 1000
 */
public class Num672 {

    public int flipLights(int n, int presses) {
        // 假设有12个灯
        // 一个开关按两次会还原，共有以下几种状态
        // 初始状态     000000 000000
        // 按压开关1    111111 111111
        // 按压开关2    010101 010101
        // 按压开关3    101010 101010
        // 按压开关4    100100 100100
        // 按压开关12   -等价于按压开关3
        // 按压开关13   -等价于按压开关2
        // 按压开关14   011011 011011
        // 按压开关23   -等价于按压开关1
        // 按压开关24   110101 110100
        // 按压开关34   001110 001110
        // 按压开关123  -等价于按压开关3两次
        // 按压开关124  -等价于按压开关34
        // 按压开关134  -等价于按压开关23
        // 按压开关1234 -等价于按压开关4
        if (presses == 0) {
            // 按压0次，只有初始状态
            return 1;
        }
        if (n == 1) {
            // 只有一个灯泡，有【开、关】两种状态
            return 2;
        } else if (n == 2) {
            // 两个灯泡时，开关4等价于开关3，假设初始状态为【关、关】
            // 按压1次的情况下，有【开、开】【开、关】【关、开】三种情况
            // 按压2次及以上时，有【开、开】【开、关】【关、关】【关、开】四种情况
            return presses == 1 ? 3 : 4;
        }
        if (presses == 1) {
            // 3个及以上灯泡时，按压一次，4个开关各一种
            return 4;
        } else if (presses == 2) {
            // 3个及以上灯泡时，按压两次，有【初始状态】【12】【13】【14】【23】【24】【34】7种
            return 7;
        }
        // 其他情况，共8种
        return 8;
    }

    public static void main(String[] args) {
        Num672 num672 = new Num672();
        Assert.check(num672.flipLights(1, 1) == 2);
        Assert.check(num672.flipLights(2, 1) == 3);
        Assert.check(num672.flipLights(3, 1) == 4);
    }

}
